{"version":3,"sources":["webpack:///./src/components/page/index.tsx","webpack:///./src/hooks/useSearch.ts","webpack:///./src/pages/fund/plate/index.tsx","webpack:///./src/utils/request.ts"],"names":["PageHead","title","option","className","children","head","padding","footer","style","history","search","setSearch","window","location","params","pathname","serialized","path","push","form","page","data","setData","loading","setLoading","setOption","targetGroup","setTargetGroup","getList","parseInt","result","list","savePlate","id","columns","dataIndex","key","render","text","funds","Object","values","map","item","slice","reduce","a","b","option15","grid","left","right","bottom","containLabel","tooltip","trigger","formatter","value","name","length","color","xAxis","type","boundaryGap","keys","yAxis","min","Math","max","height","width","series","record","onClick","setFieldsValue","pagination","dataSource","placement","contentWrapperStyle","onClose","closable","visible","onFinish","Item","label","rules","required","htmlType","instance","create","baseURL","timeout","interceptors","response","use","statusCode","rst","Promise","reject","get","url","config","post"],"mappings":"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","file":"js/4.62308.chunk.js","sourcesContent":["import React, { FC, memo, ReactNode, PropsWithChildren } from 'react'\nimport './index.scss'\n\nexport const PageHead: FC<{\n  title?: string\n  option?: () => ReactNode | ReactNode\n}> = ({ title = 'Title', option }) => {\n  return (\n    <header className='pro-page_container_header'>\n      <div>{title}</div>\n      <div>{typeof option === 'function' ? option() : option}</div>\n    </header>\n  )\n}\n\nconst Index: FC<PropsWithChildren<{\n  head?: () => ReactNode | ReactNode\n  footer?: () => ReactNode | ReactNode\n  title?: string\n  padding?: number\n  option?: () => ReactNode | ReactNode\n}>> = ({ children, head, title, option, padding = 20, footer }) => {\n  return (\n    <section className='pro-page_container'>\n      {head ? (\n        typeof head === 'function' ? (\n          head()\n        ) : (\n          head\n        )\n      ) : title ? (\n        <PageHead title={title} option={option} />\n      ) : (\n        ''\n      )}\n      <div className='pro-page_content' style={{ padding: `${padding}px` }}>\n        {children}\n      </div>\n      <div>\n        {footer ? (typeof footer === 'function' ? footer() : footer) : ''}\n      </div>\n    </section>\n  )\n}\nexport default memo(Index)\n","import { useEffect, useState } from 'react'\nimport { parse, stringify } from 'query-string'\nimport { useHistory } from 'react-router'\n\nconst useSearch = <T = any>(): [T, (_: { [key: string]: any }) => void] => {\n  const history = useHistory()\n  const [search, setSearch] = useState<T>(() => parse(window.location.search))\n  const change = (params: { [key: string]: string }) => {\n    const { pathname, search } = window.location\n    const serialized = stringify({ ...parse(search), ...params })\n    setSearch({ ...parse(search), ...params })\n    const path = `${pathname}${!!serialized ? `?${serialized}` : ''}`\n    history.push(path)\n  }\n\n  useEffect(() => {\n    setSearch(parse(window.location.search))\n  }, [history.location.search])\n\n  return [search, change]\n}\n\nexport default useSearch\n","import React, { FC, memo, useCallback, useEffect, useState } from 'react'\nimport Page from '@/components/page'\nimport useSearch from '@/hooks/useSearch'\nimport { get, post } from '@/utils/request'\nimport { Table, Button, Drawer, Form, Input } from 'antd'\nimport { PlusOutlined, EditOutlined } from '@ant-design/icons'\n\nimport './index.scss'\nimport ReactECharts from 'echarts-for-react'\n\nconst Index: FC<any> = () => {\n  const [form] = Form.useForm()\n  const [search, setSearch] = useSearch<{\n    page: string\n  }>()\n  const { page = '1' } = search\n  const [data, setData] = useState<any>([])\n  const [loading, setLoading] = useState<boolean>(false)\n  const [option, setOption] = useState<boolean | string>(false)\n  const [targetGroup, setTargetGroup] = useState<{\n    id: number\n    name: string\n  } | null>(null)\n\n  const getList = useCallback(async () => {\n    setLoading(true)\n    const result = await get<{\n      list: any[]\n      page: number\n      pageSize: number\n      pageTotal: number\n      total: number\n    }>('/ticket/fund/group', {\n      page: parseInt(page) - 1,\n    })\n    const { list } = result\n    setData(list)\n    setLoading(false)\n  }, [search])\n  const savePlate = useCallback(\n    async (data) => {\n      const result = await post('/ticket/fund/group', {\n        ...data,\n        id: option === 'edit' ? targetGroup?.id : '',\n      })\n      if (result) {\n        if (page === '1' || option === 'edit') await getList()\n        else setSearch({ page: 1 })\n        setOption(false)\n      }\n    },\n    [option]\n  )\n  useEffect(() => {\n    getList()\n  }, [search])\n\n  const columns = [\n    {\n      title: '板块名称',\n      dataIndex: 'name',\n      key: 'name',\n      render: (text: string) => {\n        return <p className='page_fund_sort-tabl-tb'>{text}</p>\n      },\n    },\n    {\n      title: '基金持仓',\n      dataIndex: 'funds',\n      key: 'funds',\n      render: (funds: any) => {\n        const data = Object.values(funds).map((item: any[]) => {\n          item = item.slice(0, 20)\n          return item.reduce((a, b) => a + parseInt(b.fund), 0)\n        })\n        const option15 = {\n          grid: {\n            left: '1%',\n            right: '4%',\n            bottom: '0%',\n            containLabel: true,\n          },\n          tooltip: {\n            trigger: 'axis',\n            formatter: function (params: any) {\n              return `${params[0].value}(${funds[params[0].name].length})`\n            },\n          },\n          color: ['red', '#CD3333'],\n          xAxis: {\n            type: 'category',\n            boundaryGap: false,\n            data: Object.keys(funds),\n          },\n          yAxis: {\n            type: 'value',\n            min: Math.min(...data),\n            max: Math.max(...data),\n          },\n        }\n        return (\n          <div className='page_fund_sort-table'>\n            <ReactECharts\n              style={{ height: '250px', width: '45%' }}\n              option={{\n                ...option15,\n                series: [\n                  {\n                    type: 'line',\n                    data,\n                  },\n                ],\n              }}\n            />\n          </div>\n        )\n      },\n    },\n    {\n      title: '操作',\n      dataIndex: 'action',\n      key: 'action',\n      render: (text: string, record: { id: number; name: string }) => {\n        return (\n          <Button\n            onClick={() => {\n              setTargetGroup(record)\n              form.setFieldsValue({\n                name: record.name,\n              })\n              setOption('edit')\n            }}\n          >\n            <EditOutlined />\n            修改{text}\n          </Button>\n        )\n      },\n    },\n  ]\n  return (\n    <Page\n      title={'板块列表'}\n      option={() => (\n        <div>\n          <Button\n            onClick={() => {\n              form.setFieldsValue({\n                name: '',\n              })\n              setOption('add')\n            }}\n          >\n            <PlusOutlined />\n            添加板块\n          </Button>\n        </div>\n      )}\n    >\n      <Table\n        pagination={false}\n        columns={columns}\n        dataSource={data}\n        loading={loading}\n      />\n      <Drawer\n        title={option === 'edit' ? '修改板块' : '添加板块'}\n        placement='right'\n        contentWrapperStyle={{ width: '350px' }}\n        onClose={() => setOption(false)}\n        closable={false}\n        visible={!!option}\n      >\n        <Form\n          form={form}\n          name='control-hooks'\n          onFinish={async (data) => {\n            await savePlate(data)\n          }}\n        >\n          <Form.Item name='name' label='板块名称' rules={[{ required: true }]}>\n            <Input />\n          </Form.Item>\n          <Form.Item className='cms-mt_20'>\n            <Button type='primary' htmlType='submit'>\n              {option === 'edit' ? '修改板块' : '添加板块'}\n            </Button>\n          </Form.Item>\n        </Form>\n      </Drawer>\n    </Page>\n  )\n}\nexport default memo(Index)\n","import axios, { AxiosRequestConfig } from 'axios'\n\nconst instance = axios.create({\n  baseURL: PRODUCTION ? 'http://127.0.0.1:3000' : '/api',\n  timeout: 10 * 60 * 1000,\n})\n\ninstance.interceptors.response.use((result) => {\n  const { data = {} } = result\n  const { statusCode, data: rst } = data\n  if (statusCode === 0) return rst\n  return Promise.reject(data)\n})\n\nexport const get = <T>(\n  url: string,\n  params?: any,\n  config?: AxiosRequestConfig\n): Promise<T & any> => instance.get(url, { ...config, params })\n\nexport const post = <T>(\n  url: string,\n  params?: any,\n  config?: AxiosRequestConfig\n): Promise<T & any> => instance.post(url, params, config)\n\nexport default instance\n"],"sourceRoot":""}