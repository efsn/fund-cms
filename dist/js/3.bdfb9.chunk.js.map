{"version":3,"sources":["webpack:///./src/components/page/index.tsx","webpack:///./src/components/title/index.tsx","webpack:///./src/pages/fund/overview/components/total.tsx","webpack:///./src/pages/fund/overview/components/percent.tsx","webpack:///./src/pages/fund/overview/index.tsx","webpack:///./src/utils/request.ts"],"names":["PageHead","title","option","className","children","head","padding","footer","style","data","setData","list","map","item","getList","result","option15","grid","left","right","bottom","top","containLabel","tooltip","trigger","color","xAxis","type","boundaryGap","yAxis","height","width","min","Math","max","series","sort","b","a","fund","slice","span","formatter","param","seriesName","value","percent","ticket","name","radius","roseType","label","show","position","total","today","Date","format","gutter","instance","create","baseURL","timeout","interceptors","response","use","statusCode","rst","Promise","reject","get","url","params","config","post"],"mappings":"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","file":"js/3.bdfb9.chunk.js","sourcesContent":["import React, { FC, memo, ReactNode, PropsWithChildren } from 'react'\nimport './index.scss'\n\nexport const PageHead: FC<{\n  title?: string\n  option?: () => ReactNode | ReactNode\n}> = ({ title = 'Title', option }) => {\n  return (\n    <header className='pro-page_container_header'>\n      <div>{title}</div>\n      <div>{typeof option === 'function' ? option() : option}</div>\n    </header>\n  )\n}\n\nconst Index: FC<PropsWithChildren<{\n  head?: () => ReactNode | ReactNode\n  footer?: () => ReactNode | ReactNode\n  title?: string\n  padding?: number\n  option?: () => ReactNode | ReactNode\n}>> = ({ children, head, title, option, padding = 20, footer }) => {\n  return (\n    <section className='pro-page_container'>\n      {head ? (\n        typeof head === 'function' ? (\n          head()\n        ) : (\n          head\n        )\n      ) : title ? (\n        <PageHead title={title} option={option} />\n      ) : (\n        ''\n      )}\n      <div className='pro-page_content' style={{ padding: `${padding}px` }}>\n        {children}\n      </div>\n      <div>\n        {footer ? (typeof footer === 'function' ? footer() : footer) : ''}\n      </div>\n    </section>\n  )\n}\nexport default memo(Index)\n","import React, { FC, memo, PropsWithChildren } from 'react'\nimport './index.scss'\n\nconst Index: FC<PropsWithChildren<{\n  title: string\n}>> = ({ children, title }) => {\n  return (\n    <section className='pro-title_container'>\n      <div className='pro-title_title'>{title}</div>\n      <div className='pro-title_content'>{children}</div>\n    </section>\n  )\n}\nexport default memo(Index)\n","import React, { FC, useCallback, useEffect, useState, Fragment } from 'react'\nimport { get } from '@/utils/request'\nimport ReactECharts from 'echarts-for-react'\ninterface Item {\n  date: string\n  fund: number\n}\n\nconst Index: FC = () => {\n  const [data, setData] = useState<Array<Item>>([])\n  const list = data.map((item: Item) => item.fund)\n  const getList = useCallback(async () => {\n    const result = await get('ticket/fund/total')\n    setData(result)\n  }, [])\n  const option15 = {\n    grid: {\n      left: '2%',\n      right: '4%',\n      bottom: '2%',\n      top: '2%',\n      containLabel: true,\n    },\n    tooltip: {\n      trigger: 'axis',\n    },\n    color: ['red', '#CD3333'],\n    xAxis: {\n      type: 'category',\n      boundaryGap: false,\n      data: data.map((item) => item.date),\n    },\n    yAxis: {\n      type: 'value',\n    },\n  }\n\n  useEffect(() => {\n    getList()\n  }, [])\n\n  return (\n    <Fragment>\n      <ReactECharts\n        style={{ height: '300px', width: '100%' }}\n        option={{\n          ...option15,\n          yAxis: {\n            type: 'value',\n            min: Math.min(...list),\n            max: Math.max(...list),\n          },\n          series: [\n            {\n              type: 'line',\n              data: list,\n            },\n          ],\n        }}\n      />\n    </Fragment>\n  )\n}\n\nexport default Index\n","import React, { FC, useCallback, useEffect, useState } from 'react'\nimport { get } from '@/utils/request'\nimport ReactECharts from 'echarts-for-react'\nimport { Row, Col } from 'antd'\ninterface Item {\n  name: string\n  type: string\n  fund: number\n  total: number\n}\n\nconst Index: FC = () => {\n  const [data, setData] = useState<Array<Item>>([])\n  const getList = useCallback(async () => {\n    const result = await get('ticket/fund/type/total')\n    setData(result.sort((b: Item, a: Item) => a.fund - b.fund).slice(0, 6))\n  }, [])\n\n  useEffect(() => {\n    getList()\n  }, [])\n  return (\n    <Row>\n      <Col span={18}>\n        <ReactECharts\n          style={{ height: '300px', width: '100%' }}\n          option={{\n            tooltip: {\n              trigger: 'item',\n              formatter: function (param: any) {\n                const { seriesName, value, percent, data } = param\n                const result = `${seriesName} <br/>\n                  持仓数量：${value}<br/>\n                  比例 : ${percent}%<br/>\n                  龙头股票 : ${data.ticket}\n                  `\n                return result\n              },\n            },\n            series: [\n              {\n                name: '持仓占比(总额)',\n                type: 'pie',\n                radius: '85%',\n                roseType: 'angle',\n                data: data.map((item: Item) => ({\n                  value: item.fund,\n                  name: item.type,\n                  ticket: item.name,\n                })),\n              },\n            ],\n          }}\n        />\n      </Col>\n      <Col span={6}>\n        <ReactECharts\n          style={{ height: '300px', width: '100%' }}\n          option={{\n            tooltip: {\n              trigger: 'item',\n              formatter: function (param: any) {\n                const { seriesName, value, percent } = param\n                const result = `${seriesName} <br/>\n                  比例 : ${percent}%<br/>\n                  持仓数量：${value}`\n                return result\n              },\n            },\n            series: [\n              {\n                name: '持仓比例(个数)',\n                type: 'pie',\n                radius: '95%',\n                roseType: 'angle',\n                label: {\n                  show: true,\n                  position: 'inside',\n                },\n                data: data.map((item: Item) => ({\n                  value: item.total,\n                  name: item.type,\n                  ticket: item.name,\n                })),\n              },\n            ],\n          }}\n        />\n      </Col>\n    </Row>\n  )\n}\n\nexport default Index\n","import React, {\n  FC,\n  memo,\n  // useCallback,\n  useEffect,\n  // useState,\n  // Fragment,\n} from 'react'\nimport Page from '@/components/page'\nimport Title from '@/components/title'\nimport Total from './components/total'\nimport Percent from './components/percent'\nimport moment from 'moment'\nimport { Row, Col } from 'antd'\n\nimport './index.scss'\n\nconst Index: FC<any> = () => {\n  useEffect(() => {}, [])\n  const today = moment(new Date()).format('YYYY-MM-DD')\n\n  return (\n    <Page title={`信息概览(${today})`}>\n      <Row gutter={20}>\n        <Col span={12}>\n          <Title title={'前150总额'}>\n            <Total />\n          </Title>\n        </Col>\n        <Col span={12}>\n          <Title title={'前200板块比例(总额/个数)'}>\n            <Percent />\n          </Title>\n        </Col>\n      </Row>\n    </Page>\n  )\n}\nexport default memo(Index)\n","import axios, { AxiosRequestConfig } from 'axios'\n\nconst instance = axios.create({\n  baseURL: PRODUCTION ? 'http://127.0.0.1:3000' : '/api',\n  timeout: 10 * 60 * 1000,\n})\n\ninstance.interceptors.response.use((result) => {\n  const { data = {} } = result\n  const { statusCode, data: rst } = data\n  if (statusCode === 0) return rst\n  return Promise.reject(data)\n})\n\nexport const get = <T>(\n  url: string,\n  params?: any,\n  config?: AxiosRequestConfig\n): Promise<T & any> => instance.get(url, { ...config, params })\n\nexport const post = <T>(\n  url: string,\n  params?: any,\n  config?: AxiosRequestConfig\n): Promise<T & any> => instance.post(url, params, config)\n\nexport default instance\n"],"sourceRoot":""}